from tools import *
import math

S_BOX = \
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9,
     0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f,
     0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07,
     0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3,
     0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
     0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3,
     0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f,
     0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
     0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,
     0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a,
     0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
     0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
     0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
     0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

NON_FIBONACCI_NUM = \
    [4, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38,
     39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63]

def split_string_into_list_of_length_n(string, n):
    if (len(string) % n) != 0: raise Exception()
    return [string[i:i + n] for i in range(0, len(string), n)]

def switch_string_of_five(string):
    if len(string) != 5: raise Exception()
    return string[3] + string[4] + string[2] + string[0] + string[1]

def substitute_using_non_fibonacci_index(string):
    if len(string) != 64: raise Exception()
    string = list(string)
    for num in NON_FIBONACCI_NUM:
        string[num] = "1" if string[num] == "0" else "0"
    return "".join(string)

def substitute_using_s_box(string):
    if len(string) != 64: raise Exception()
    string = split_string_into_list_of_length_n(string, 8)
    for index in range(len(string)):
        string[index] = str(S_BOX[int(string[index], 2)])
    for index in range(len(string)):
        string[index] = '{:08b}'.format(int(string[index]))
    return "".join(string)

def slide(string):
    if len(string) != 64: raise Exception()
    string_on_the_left = split_string_into_list_of_length_n(string[:30], 5)
    string_on_the_right = split_string_into_list_of_length_n(string[34:], 5)
    string_on_the_center = string[30:-30]

    for index in range(len(string_on_the_left)):
        string_on_the_left[index] = switch_string_of_five(string_on_the_left[index])
    for index in range(len(string_on_the_right)):
        string_on_the_right[index] = switch_string_of_five(string_on_the_right[index])
    return "".join(string_on_the_left) + string_on_the_center + "".join(string_on_the_right)

def transpose(bin_str):
    temp = hex(int(bin_str,2))
    temp = temp[2:]
    temp = split_array(temp, 4)
    result_trans = ""
    result = ""
    print(temp)

    for c in temp:
        # transpose
        result_trans += c[3] + c[1] + c[2] + c[0]
    
    print(result_trans)
    
    # for i in split_array(bin(int(result_trans,16))[2:],8):
    #     result += i.zfill(8)
    result = bin(int(result_trans,16))[2:]
    if  len(result) % 8 != 0:
        result = result.zfill(len(result) + 8 - (len(result)%8))
    return result

def xor_key(bin_str,key):
    bin_arr = split_array (bin_str,4)
    key_arr = split_array (key[::-1],4)
    result = ""

    for i in range(8):
        result += bin(int(bin_arr[i],2) ^ int(key_arr[i],2))[2:].zfill(4)

    return result

def generate_rkey(cbin,key):
    cbin_arr = split_array (cbin,8)
    key_arr = split_array (key ,8)
    result = ''

    for i in range(4):
        result += bin(math.floor(math.sqrt(int(cbin_arr[i],2)**2 + int(key_arr[i],2)**2)%256))[2:].zfill(8)

    return result


if __name__ == "__main__":
    src = "1010101010101010101010101010101010101010101010101010101010101010"
    res = slide(src)
    print("---------------------------------------------------------------")
    print(src)
    print(res)


# test
# transpose('0010010111110000') = '0000010111110010'
# xor_key ('10000000100000001000000010000000', '11110000111100001111000011110000') = '10001111100011111000111110001111'
# print(generate_rkey('10001011100010111000101110001011', '11001100110011001100110011001100'))